*. 從fullCalendar的實做來觀察他變動的方式：

	＃ fc-daygrid-event-harness fc-daygrid-event-harness-abs => 紀錄目前event位置與寬度
		=> 位置：以目前載入的位置為主會設定為top: 0px; left: 0px;
		=> 寬度：現在頁面上橫跨的天數去轉為目前寬度紀錄
		
	＃ 移動時：插入一樣的element(fc-daygrid-event-harness fc-daygrid-event-harness-abs)，與原element同層
		1. 原element會設定為visibility: hidden;
		2. 插入element會變動他目前的位置與寬度(依照目前的操作)
		3. 放開滑鼠後，插入element會消失，上面所紀錄的位置會設定給原element
		
	＃ 拖動區域：與我原想法一樣作法
	
	＃ visibility：element中layout部份保留，但可隱藏自己並無法獲得焦點
	
	＃ 猜：他把每個單位都用外距推出去來搞事？
	
結構：

	fc-daygrid-day-frame fc-scrollgrid-sync-inner	=> 214 * 115
		|
		|-- fc-daygrid-day-top			=> 214 *  38
		|-- fc-daygrid-day-events		=> 214 *  40
		|	|
		|	|-- fc-daygrid-day-bottom	=> 214 *   0
		|
		|-- fc-daygrid-day-bg			=> 214 *   0
	
	
	fc-daygrid-day-frame
	fc-daygrid-day-events
---------
回去挖source code：

	packages/core/src/options.ts 		-> 宣告型態
	packages/core/src/CalendarContext.ts 	-> 包裝成大型態
	packages/core/src/internal.ts		-> 全包出去
	
	
	packages/interaction/src/interactions/EventDragging.ts =>
		1. -> .fc-event-draggable, .fc-event-resizable
		
	packages/interaction/src/interactions/EventResizing.ts =>
		1. -> .fc-event-resizer
		2. 事件：
			-> pointerdown	猜：按下resize區的時候
			-> dragstart	猜：拖曳大小開始
			-> hitupdate	猜：變化大小時更動resize區時？
			-> dragend	猜：拖曳大小結束
		3. 關鍵字：
			-> minDistance (eventDragMinDistance)	猜：設定拖曳的最小距離		解：好像有看到一點東西！？
			-> settings InteractionSettings		猜：已經在這裡把基本數值設定好	解：有點複雜，目前沒看到像的東西
			-> ev: PointerDragEvent			猜：關於方法中的計算		解：結果只是型態宣告
		
	From EventResizing Find：
	=>
	packages/interaction/src/dnd/FeaturefulElementDragging.tx =>
		1. 同層ts：AutoScroller / ElementMirror / PointerDragging (可能都要checked一下)
		2. func：
			*. destroy() 
				=> 猜：資源回收
				
			*. onPointerDown(PointerDragEvent) => 
				preventSelection(document.body)：					消除selection event
				preventContextMenu(document.body)：					消除contextMenu event
				this.emitter.trigger('pointerdown', ev)：				emitter觸發pointerdown事件
				this.mirror.setIsVisible(false)：					mirror element設定成display: none
				this.mirror.start(ev.subjectEl as HTMLElement, ev.pageX, ev.pageY)：	mirror element初始化設定
					=> origScreenCoord：pageCoord - window.pageCoordOffset
					=> deltaCoord：0
				this.startDelay(ev)：							觸發下方func
				
			*. onPointerMove(PointerDragEvent) =>
				this.emitter.trigger('pointermove', ev)：				emitter觸發pointermove事件
				distanceSq = deltaX * deltaX + deltaY * deltaY：			算出移動的方形面積？
				if (distanceSq >= minDistance * minDistance)：				確認最小移動方形與移動方形
				this.handleDistanceSurpassed(ev)：					如果有符合判斷式，觸發下方func
				this.mirror.handleMove(ev.pageX, ev.pageY)：				mirror element設定移動事件
				this.autoScroller.handleMove(ev.pageX, ev.pageY)：			AutoScroller設定移動事件
				this.emitter.trigger('dragmove', ev)：					emitter觸發dragmove事件
				
			*. onPointerUp(PointerDragEvent) =>
				allowSelection(document.body)：						恢復selection event
				allowContextMenu(document.body)：					恢復contextMenu event
				this.emitter.trigger('pointerup', ev)：					emitter觸發pointerup事件
				this.autoScroller.stop()：						AutoScroller設定停止事件
				this.tryStopDrag(ev)：							觸發下方func
				
			*. startDelay(PointerDragEvent) => 
				if (typeof this.delay === 'number')：					確認delay的type為number
				--- setTimeout	
				--- setting value							
				this.handleDelayEnd(ev)：						觸發下面func
				
			*. handleDelayEnd(PointerDragEvent) =>
				--- setting value
				this.tryStartDrag(ev)：							觸發下面func
				
			*. handleDistanceSurpassed(PointerDragEvent)
			
			*. tryStartDrag(PointerDragEvent) =>
				--- setting value
				this.autoScroller.start(ev.pageX, ev.pageY, this.containerEl)：		AutoScroller設定移動相關value
				this.emitter.trigger('dragstart', ev)：					emitter觸發dragstart事件
				
			*. tryStopDrag(PointerDragEvent) =>
				this.mirror.stop(this.mirrorNeedsRevert, this.stopDrag.bind(this, ev))：mirror element設定停止事件
			
			*. stopDrag(PointerDragEvent) =>
				--- setting value
				this.emitter.trigger('dragend', ev)					emitter觸發dragend事件
			
			*. setIgnoreMove(boolean)
			*. setMirrorIsVisible(boolean)
			*. setMirrorNeedsRevert(boolean)
			*. setAutoScrollEnabled(boolean)
		
		3. flow：
			*. onPointerDown(PointerDragEvent)
				-> startDelay(PointerDragEvent)
				  -> handleDelayEnd(PointerDragEvent)
				    -> tryStartDrag(PointerDragEvent)
				    
			*. onPointerMove(PointerDragEvent)
				-> handleDistanceSurpassed(PointerDragEvent)
				  -> tryStartDrag(PointerDragEvent)
		
			*. onPointerUp(PointerDragEvent)
				-> tryStopDrag(PointerDragEvent)
				  -> stopDrag(PointerDragEvent)
		4. 補：
			*. PointerDragEvent => 型態
			
	back to the God's perspective：
	
	
	farther : 
		*. 找到 .fc-event-draggable .fc-event-resizable的class了（EventDragging: line44）
		*. 感覺EventDragging所繼承的Interaction很可疑
		*. 不想要drag和resize同時開，可以使用eventStartEditable or eventDurationEditable
		*. eventDurationEditable是for resize
		
	question :
		#. fc中的callbacks -> eventResize會是我要找的目標嗎？
	
---------
全補：

	onselectstart => 防止選中文本？	
		=> 防止target被mouse和touch選到
	source:
		https://cloud.tencent.com/developer/article/1180728
	
	oncontextmenu => 開啟右鍵選單or長按選單
	source: 
		https://developer.mozilla.org/zh-CN/docs/Web/API/Element/contextmenu_event

	pageX document: https://segmentfault.com/a/1190000002405897
	pageXoffset document: https://www.tiocloud.com/2/blog/1396807074142363648
	
